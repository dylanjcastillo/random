(()=>{const e=new MutationObserver((e=>{let t=document.querySelectorAll('div[id^="errors-"]');[].forEach.call(t,(function(e){parseInt(e.id.split("-")[1])!=t.length&&e.classList.add("hidden")}))})),t=new MutationObserver((e=>{let t=document.querySelectorAll('div[id^="output-"]');[].forEach.call(t,(function(e){parseInt(e.id.split("-")[1])!=t.length&&e.classList.add("hidden")})),document.querySelector("#initial-repl button").click(),t=document.querySelectorAll('[id^="initial-"]'),[].forEach.call(t,(function(e){parseInt(e.id.split("-")[1])!=t.length&&e.classList.add("hidden")}))})),n=document.getElementById("errors"),a=document.getElementById("output");t.observe(a,{childList:!0,subtree:!0}),e.observe(n,{childList:!0,subtree:!0});const s={"Create a new column":'df["length_width_ratio"] = df["sepal_length"] / df["sepal_width"]\ndf.head()',"Create a column in a method chain":"(\n    df\n    .groupby('iris_class')\n    .agg(\n        avg_sepal_length=('sepal_length', 'mean'), \n        avg_sepal_width=('sepal_width', 'mean')\n    )\n    .assign(is_wide=lambda df_: df_.avg_sepal_width > df_.avg_sepal_length)\n)","Map values of a column":'iris_ids = {\n    "Iris-setosa": 1,\n    "Iris-virginica": 2,\n    "Iris-versicolor": 3\n}\n      \ndf["iris_class"].map(iris_ids)',"Apply a function to multiple columns":'def func(sepal_length, sepal_width):\n    if sepal_length / sepal_width > 0.5:\n        return (sepal_length + sepal_width) / 10\n    else:\n        return sepal_length / 5\n\ndf.apply(\n    lambda row: func(row["sepal_length"], row["sepal_width"]), \n    axis=1\n)'},l={"Merge DataFrames":'df2 = pd.DataFrame(\n    {\n        "iris_class" : ["Iris-setosa", "Iris-versicolor", "Iris-virginica"],\n        "id_class": [1, 2, 3]\n    }\n)\n\ndf.merge(df2, how="left", on="iris_class")',"Concatenate DataFrames":'df2 = pd.DataFrame(\n    columns=["sepal_length", "sepal_width", "petal_length", "petal_width", "iris_class"],\n    data=[[10,10,10,10, "Iris-setosa"]]\n)\npd.concat([df2, df], axis=0)'},i={"Apply an aggregation function to a column":"df.petal_length.max()\n# This also applies to other agg functions (sum, min, std, var, etc.)","Apply an aggregation function per group to all columns":'df.groupby("iris_class").mean()\n# This also applies to other agg functions (sum, min, std, var, etc.)',"Create columns with specific aggregations per column":"(df\n.groupby(\"iris_class\")\n.agg(\n    max_petal_length=('petal_length', max), \n    min_petal_width=('petal_width', min))\n)"},o={"Number of rows and columns":"df.shape","Get the # of rows with each unique value":"df.iris_class.value_counts(dropna=False)","Get the # of distinct values of a column":"df.petal_length.nunique()","Get the distinct values of a column":"df.petal_length.unique()","Basic descriptive statistics of the data":"df.describe()"},d={"Gather columns into rows":'df.melt(id_vars=["iris_class"], var_name="feature", value_name="value")',"Sort rows":"df.sort_values(by=['sepal_length', 'sepal_width'])","Sort index":"df.sort_index()","Reset index":"df.reset_index()","Remove columns":"df.drop(columns=['sepal_length', 'sepal_width'])","Rename columns":"df.rename(\n    columns={\n        'sepal_length': 'sepal_length_new', \n        'sepal_width': 'sepal_width_new'\n    }\n)"},r={"Select a single column":"df['sepal_length']","Select multiple columns":"df[['sepal_length', 'sepal_width']]","Select columns using regex":"df.filter(regex='^petal')"},c={"Filter with logical criteria":"df[\n    (df.sepal_length == 6.4) \n    & (df.sepal_width == 3.2)\n]","Filter with query strings":'df.query("sepal_length == 6.4 & sepal_width == 3.2")',"Find duplicates":"df[df.duplicated(keep=False)]","Drop duplicates":"df.drop_duplicates()","Find rows missing values":"df[df.isnull().any(axis=1)]","Exclude rows missing values":"df.dropna()","Filter rows using a list of values":"df[df.sepal_length.isin([6.4, 6.5, 6.6])]","Sample of n rows":"df.sample(n=3)","First n rows":"df.head(3)","Last n rows":"df.tail(3)"},u={"Access rows/columns by labels or boolean array":"df.loc[df.petal_length < 3, ['sepal_length', 'sepal_width']]","Acccess row/columns by index":"df.iloc[0:3, [0, 1]]","Access a single value by index":"df.iat[0, 0]","Access a single value by label":"df.at[0, 'sepal_length']"};function p(){let e=document.getElementById("category");document.getElementById("operation").innerHTML="",operations=function(e){let t=["Choose an operation"],n={};for(var a in"subset_rows"===e&&(n=c),"subset_cols"===e&&(n=r),"subset_rows_cols"===e&&(n=u),"reshape"===e&&(n=d),"summarize"===e&&(n=o),"aggregations"===e&&(n=i),"join_df"===e&&(n=l),"manipulate"===e&&(n=s),n)t.push(a);return t}(e.value);for(var t=0;t<operations.length;t++){var n=document.createElement("option");n.text=operations[t],n.value=operations[t],0==t&&(n.selected=!0),document.getElementById("operation").appendChild(n)}}function m(){let e=document.getElementById("category"),t=document.getElementById("operation"),n=function(e,t){return"subset_rows"===e?c[t]:"subset_cols"===e?r[t]:"subset_rows_cols"===e?u[t]:"reshape"===e?d[t]:"summarize"===e?o[t]:"aggregations"===e?i[t]:"join_df"===e?l[t]:"manipulate"===e?s[t]:""}(e.value,t.value);if(""!=n){document.getElementById("output-repl").remove();let e=document.createElement("py-repl");if(e.textContent=n,e.setAttribute("std-out","output"),e.setAttribute("std-err","errors"),e.id="output-repl",document.getElementById("container-repl").appendChild(e),n.match("$")){let e=document.getElementById("container-repl").getElementsByClassName("cm-line");for(var a=0;a<e.length;a++)e[a].textContent=e[a].textContent.replace("amp;","").replace("&lt;","<").replace("&gt;",">")}}}document.addEventListener("DOMContentLoaded",(function(){document.getElementById("category").addEventListener("change",p),p(),document.getElementById("operation").addEventListener("change",m)}))})();